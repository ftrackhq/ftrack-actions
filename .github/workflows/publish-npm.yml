name: CD

on:
  workflow_call:
    secrets:
      token:
        description: "The GitHub token"
        required: true
      npmToken:
        description: "NPM registry token"
        required: true
    inputs:
      scope:
        type: string
        description: "NPM scope"
        required: false
        default: "@ftrack"
      registryUrl:
        type: string
        description: "Registry URL"
        required: false
        default: "https://registry.npmjs.org/"
      packageUrl:
        type: string
        description: "Package URL"
        required: false
        default: "https://www.npmjs.com"

jobs:
  publish-npm:
    timeout-minutes: 10
    name: "Publish to NPM"
    runs-on: ubuntu-latest
    environment: production
    env:
      GITHUB_TOKEN: ${{ secrets.token || secrets.GITHUB_TOKEN }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          registry-url: ${{ inputs.registryUrl }}
          scope: ${{ inputs.scope }}

      # caching with actions/setup-node isn't supported with yarn 3
      # so we use this workaround https://github.com/actions/setup-node/issues/488
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
        shell: bash
      - name: Restore yarn cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-cache-folder-${{ hashFiles('**/yarn.lock', '.yarnrc.yml') }}
          restore-keys: |
            yarn-cache-folder-
      - run: yarn install --immutable

        # ########## RESOLVE NPM_TAG ##########

        # Default to latest
      - run: echo "NPM_TAG=latest" >> $GITHUB_ENV

        # If tag sha is not the latest in the main branch, publish it to as tag name
      - run: if [ "$(git rev-parse origin/main)" != "$(git rev-parse ${{ github.ref }})" ]; then echo "NPM_TAG=${{ github.ref_name }}" >> $GITHUB_ENV; fi

        # If tag is prerelease tag, publish to prerelease channel (i.e, 1.0.0-alpha.1 -> alpha)
      - if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref_name, '-')
        run: echo "NPM_TAG=$(echo ${{ github.ref_name }} | grep -Eo "\-[a-z]+" | sed "s/^-//g")" >> $GITHUB_ENV

        # ########## BUMP PACKAGE VERSION ##########

        # Add tag to package.json and run publish script
      - if: startsWith(github.ref, 'refs/tags/v')
        run: npm version --no-git-tag-version ${{ github.ref_name }}

        # ############# PUBLISH TO NPM #############

      - run: yarn npm publish --access public --tag ${{ env.NPM_TAG }}
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.npmToken || secrets.NPM_TOKEN }}
