name: CD

on:
  workflow_call:
    secrets:
      token:
        description: "The GitHub token"
        required: true
      gcrJsonKey:
        description: "JSON key for GCR authentication"
        required: true
      dockerSecrets:
        description: "Docker build push action"
        required: false
    inputs:
      gcrRegistry:
        type: string
        description: "Google Cloud Registry URL"
        required: true
      ghcrRegistry:
        type: string
        description: "GitHub Registry URL"
        required: true
      gcrNamespace:
        type: string
        description: "Image prefix when uploading to Google Cloud Registry"
        required: true
      ghcrNamespace:
        type: string
        description: "Image prefix when uploading to GitHub Registry"
        required: true
      dockerFile:
        type: string
        description: Path to the Dockerfile. (default ./Dockerfile)
        required: false
        default: ./Dockerfile
      context:
        type: string
        description: Path to context
        required: false
        default: .
      lint:
        type: boolean
        description: "Set to true to lint Dockerfile as part of build"
        required: false
        default: false
      imageName:
        type: string
        description: "Name of Docker image"
        required: true
      target:
        type: string
        description: "Sets the target stage to build"
        required: false
        default: ""
      provenance:
        type: string
        description: Generate provenance attestation for the build (shorthand for --attest=type=provenance). Currently not working with gcr
        required: false
        default: false
      build-args:
        type: string
        required: false
        default: ""

jobs:
  build-and-push-image:
    name: "Build and push to registries"
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Required for image layer cache
      - uses: docker/setup-buildx-action@v2

      - name: Lint Dockerfile
        if: ${{ inputs.lint }}
        uses: hadolint/hadolint-action@v3.0.0
        with:
          dockerfile: ${{ inputs.dockerFile }}
          failure-threshold: "warning"
          verbose: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.ghcrRegistry }}
          username: ${{ github.actor }}
          password: ${{ secrets.token }}

      - name: Log in to the Google Cloud Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.gcrRegistry }}
          username: _json_key
          password: ${{ secrets.gcrJsonKey }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          images: |
            ${{ inputs.gcrRegistry }}/${{ inputs.gcrNamespace }}/${{ inputs.imageName }}
            ${{ inputs.ghcrRegistry }}/${{ inputs.ghcrNamespace }}/${{ inputs.imageName }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerFile }}
          build-args: ${{ inputs.build-args }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ${{ inputs.target }}
          provenance: ${{ inputs.provenance }}
          secrets: ${{ secrets.dockerSecrets }}
